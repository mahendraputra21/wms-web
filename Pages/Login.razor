@page "/login"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <br/>
    <button type="submit" class="btn btn-primary right">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @errorMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private LoginModel loginModel = new LoginModel();

    private string errorMessage = "";

    private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (loginModel.Email == "admin@blazor.com" && loginModel.Password == "rahasia")
        {
            NavigationManager.NavigateTo("index");
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}
